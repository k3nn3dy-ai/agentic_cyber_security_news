import requests
from datetime import datetime, timedelta
import json

"""
This script fetches recent CVE (Common Vulnerabilities and Exposures) data from the 
National Vulnerability Database (NVD) API. It retrieves vulnerabilities published 
in the last 14 days that have known exploits and outputs the results in JSON format.

The script:
1. Calculates a date range (last 14 days)
2. Makes an API request to the NVD database to get the vulnerabilities with known exploits over the last 7 days.
3. Prints either the vulnerability data or an error message
"""

base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0?hasKev"

# Calculate dates
end_date = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.000")
start_date = (datetime.now() - timedelta(days=14)).strftime("%Y-%m-%dT%H:%M:%S.000")

params = {
    "pubStartDate": start_date,
    "pubEndDate": end_date,
}

# Headers for the request
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
    "Accept": "application/json"
}

# Make the request
response = requests.get(base_url, params=params, headers=headers)

# Process the response
if response.status_code == 200:
    data = response.json()
    
    # Check if the response contains valid vulnerability data
    if not data.get('vulnerabilities'):
        print("No vulnerabilities found in the specified date range.")
        exit(0)
    
    # Generate filename with current timestamp
    timestamp = datetime.now().strftime("%Y%m%d")
    filename = f"new_exploitable_cve_results_{timestamp}.json"
    
    # Save response directly to JSON file
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, indent=4, fp=f)
    
    print(f"Results saved to: {filename}")

    def _run(self, *args, **kwargs):
        return self.fetch_exploitable_cve()